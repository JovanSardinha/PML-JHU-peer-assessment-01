install.packages("mlbench")
data(BostonHousing)
library(mlbench)
data(BostonHousing)
library(earth)
library(caret)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(training$CompressiveStrength)
install.packages("Hmisc")
library(Hmisc)
qplot(training$CompressiveStrength)
qplot(CompressiveStrength, colour=.,data=training)
qplot(CompressiveStrength, colour=.,data=cement)
qplot(CompressiveStrength, colour=cement,data=training)
qplot(CompressiveStrength, colour=Cement,data=training)
qplot(CompressiveStrength,data=training)
plot(CompressiveStrength,data=training)
plot(training$CompressiveStrength)
plot(testing$CompressiveStrength)
plot(mixtures$CompressiveStrength)
plot(training$CompressiveStrength)
g <- qplot(seq_along(CompressiveStrength), CompressiveStrength, data  = training)
print(g)
g <- qplot(seq_along(CompressiveStrength), CompressiveStrength, data  = training)
p
g <- qplot(seq_along(CompressiveStrength), CompressiveStrength, data  = training)
g <- g + geom_point()
print(g)
g <- qplot(seq_along(CompressiveStrength), CompressiveStrength, data  = training)
g <- g + geom_point()
print(g)
g <- qplot(seq_along(CompressiveStrength), CompressiveStrength, data  = training)
g <- g + geom_point(aes(colour=Cement))
print(g)
g <- qplot(seq_along(CompressiveStrength), CompressiveStrength, data  = training)
g <- g + geom_point(aes(colour=Cement, FlyAsh))
print(g)
g <- qplot(seq_along(CompressiveStrength), CompressiveStrength, data  = training)
g <- g + geom_point()
print(g)
g <- qplot(seq_along(CompressiveStrength), CompressiveStrength, data  = training)
g <- g + geom_point()
g <= g + facet_grid(CompressiveStrength ~ .)
print(g)
g <- qplot(seq_along(CompressiveStrength), CompressiveStrength, data  = training)
g <- g + geom_point()
g <- g + facet_grid(CompressiveStrength ~ .)
print(g)
g <- qplot(seq_along(CompressiveStrength), CompressiveStrength, data  = training)
g <- g + geom_point()
print(g)
str(training)
g <- g + geom_point(aes(colour=Cement))
g <- qplot(seq_along(CompressiveStrength), CompressiveStrength, data  = training)
g <- g + geom_point(aes(colour=Cement))
print(g)
g <- qplot(seq_along(CompressiveStrength), CompressiveStrength, data  = training)
g <- g + geom_point(aes(colour=Cement+BlastFurnaceSlag))
print(g)
g <- qplot(seq_along(CompressiveStrength), CompressiveStrength, data  = training)
g <- g + geom_point(aes(colour=Cement,BlastFurnaceSlag))
print(g)
g <- qplot(seq_along(CompressiveStrength), CompressiveStrength, data  = training)
g <- g + geom_point(aes(colour=Cement))
g <- g + geom_point(aes(colour=BlastFurnaceSlag))
print(g)
g <- qplot(seq_along(CompressiveStrength), CompressiveStrength, data  = training)
g <- g + geom_point(aes(colour=BlastFurnaceSlag))
print(g)
g <- qplot(seq_along(CompressiveStrength), CompressiveStrength, data  = training)
g <- g + geom_point(aes(colour=FlyAsh))
print(g)
g <- qplot(seq_along(CompressiveStrength), CompressiveStrength, data  = training)
g <- g + geom_point(aes(colour=Water))
print(g)
g <- qplot(seq_along(CompressiveStrength), CompressiveStrength, data  = training)
g <- g + geom_point(aes(colour=Superplasticizer))
print(g)
g <- qplot(seq_along(CompressiveStrength), CompressiveStrength, data  = training)
g <- g + geom_point(aes(colour=CoarseAggregate))
print(g)
g <- qplot(seq_along(CompressiveStrength), CompressiveStrength, data  = training)
g <- g + geom_point(aes(colour=FineAggregate))
print(g)
g <- qplot(seq_along(CompressiveStrength), CompressiveStrength, data  = training)
g <- g + geom_point(aes(colour=Age))
print(g)
g <- qplot(seq_along(CompressiveStrength), CompressiveStrength, data  = training)
g <- g + geom_point(aes(colour=FlyAsh))
print(g)
g <- qplot(seq_along(CompressiveStrength), CompressiveStrength, data  = mixtures)
g <- g + geom_point(aes(colour=FlyAsh))
print(g)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(SuperPlasticizer$training)
qplot(Superplasticizer$training)
qplot(Superplasticizer$training)
qplot(training$Superplasticizer)
log(0)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
grep("IL*", colnames(training))
str(training)
colnames(training)
grep("^IL*", colnames(training))
grep("^[IL]*", colnames(training))
grep("^IL", colnames(training))
training2 <- training[,grep("^IL", colnames(training))]
colnames(training2)
preProc <- preProcess(traning, method = "pca", pcaComp = 2)
preProc <- preProcess(traning2, method = "pca", pcaComp = 2)
preProc <- preProcess(traning2[], method = "pca", pcaComp = 2)
training2 <- training[,grep("^IL", colnames(training))]
preProc <- preProcess(traning2, method = "pca", pcaComp = 2)
training2 <- training[,grep("^IL", colnames(training))]
preProc <- preProcess(training2, method = "pca", pcaComp = 2)
trainPC <- predict(preProc, training2)
training2 <- training[,c(1,grep("^IL", colnames(training)))]
preProc <- preProcess(training2, method = "pca", pcaComp = 2)
trainPC <- predict(preProc, training2)
training2 <- training[,c(grep("^IL", colnames(training)))]
preProc <- preProcess(training2, method = "pca", pcaComp = 2)
trainPC <- predict(preProc, training2)
training2 <- training[,c(1,grep("^IL", colnames(training)))]
preProc <- preProcess(training2[,-1], method = "pca", pcaComp = 2)
trainPC <- predict(preProc, training2)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training2$diagnosis~., method = "glm", data = training2)
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
library(caret)
library(AppliedPredictiveModeling)
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
testPC <- predict(preProc, testing2[,-1])
testing2 <- testing[,c(1,grep("^IL", colnames(training)))]
testPC <- predict(preProc, testing[,-1])
testPC <- predict(preProc, testing[,-1])
testPC <- predict(preProc, testing2[,-1])
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
install.packages('e1071', dependencies=TRUE)
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
testPC <- predict(preProc, testing2[,-1])
library(e1071)
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
testPC <- predict(preProc, testing2[,-1])
confusionMatrix(testing2$type, predict(modelFit, testPC))
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
str(testing2[,-1])
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", pcaComp = 2)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
testPC <- predict(preProc, testing2[,-1])
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
print(modelFit)
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", pcaComp = 5)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
Print(modelFit)
print(modelFit)
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", pcaComp = 7)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
print(modelFit)
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", pcaComp = 9)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
print(modelFit)
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", pcaComp = 10)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
print(modelFit)
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.85)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
print(modelFit)
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess.default(training2[,-1], method = "pca", thresh = 0.85)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
print(modelFit)
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", pcaComp = 5)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
testPC <- predict(preProc, testing2[,-1])
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
testPC
modelFit
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
modelFit
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
modelFit$numComp
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", pcaComp = 5)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
modelFit$numComp
modelFit$comp
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.90)
preProc$rotation
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.95)
training2 <- training
testing2 <- testing
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.95)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.95)
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.95)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
testPC <- predict(preProc, testing2[,-1])
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
testPC <- predict(preProc, testing2[,-1])
predict(modelFit, testPC)
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.90)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training2$diagnosis ~., method = "glm", data = training2)
testPC <- predict(preProc, testing2[,-1])
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.90)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(diagnosis ~., method = "glm", data = training2)
testPC <- predict(preProc, testing2[,-1])
confusionMatrix(diagnosis, predict(modelFit, testPC))
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC), data = training2)
confusionMatrix.default(testing2$diagnosis, predict(modelFit, testPC))
confusionMatrix.default(testing2$diagnosis, predict(modelFit, testPC))
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
debug
debug(confusionMatrix(testing2$diagnosis, predict(modelFit, testPC)))
showerror
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
library(caret); library(kernlab); data(spam)
install.packages("kernlab")
library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
preProc <- preProcess(log10(training[,-58]+1),method="pca",pcaComp=2)
trainPC <- predict(preProc,log10(training[,-58]+1))
modelFit <- train(training$type ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,log10(testing[,-58]+1))
confusionMatrix(testing$type,predict(modelFit,testPC))
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.90)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(diagnosis ~., method = "glm", data = trainPC)
testPC <- predict(preProc, testing2[,-1])
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
library(caret)
library(AppliedPredictiveModeling)
library(e1071)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.90)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(diagnosis ~., method = "glm", data = trainPC)
testPC <- predict(preProc, testing2[,-1])
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.90)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
testPC <- predict(preProc, testing2[,-1])
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
library(caret)
library(AppliedPredictiveModeling)
library(e1071)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.90)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
testPC <- predict(preProc, testing2[,-1])
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
library(caret)
library(AppliedPredictiveModeling)
library(e1071)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.80)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
testPC <- predict(preProc, testing2[,-1])
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1])
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
testPC <- predict(preProc, testing2[,-1])
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
install.packages('e1071', dependencies=TRUE)
library(caret)
library(AppliedPredictiveModeling)
library(e1071)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.90)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
testPC <- predict(preProc, testing2[,-1])
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
library(caret)
library(AppliedPredictiveModeling)
library(e1071)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.90)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
testPC <- predict(preProc, testing2[,-1])
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
library(caret)
library(AppliedPredictiveModeling)
library(e1071)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.80)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
testPC <- predict(preProc, testing2[,-1])
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.80)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
testPC <- predict(preProc, testing2[,-1])
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
library(caret)
library(AppliedPredictiveModeling)
library(e1071)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.80)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training$diagnosis ~., method = "glm", data = trainPC)
testPC <- predict(preProc, testing2[,-1])
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
availablePackages <- available.packages()[,1]
install.packages(availablePackages)
installedPackages <- .packages(all.available = TRUE)
install.packages('e1071', dependencies=TRUE)
library(caret)
library(AppliedPredictiveModeling)
library(e1071)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.90)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training2$diagnosis ~., method = "glm", data = trainPC)
testPC <- predict(preProc, testing2[,-1])
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
library(caret)
library(AppliedPredictiveModeling)
library(e1071)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training2 <- training[,c(1,grep("^IL", colnames(training)))]
testing2 <- testing[,c(1,grep("^IL", colnames(testing)))]
preProc <- preProcess(training2[,-1], method = "pca", thresh = 0.90)
trainPC <- predict(preProc, training2[-1])
modelFit <- train(training2$diagnosis ~., method = "glm", data = trainPC)
confusionMatrix(testing2$diagnosis, predict(modelFit, testPC))
confusionMatrix(testing2$diagnosis, predict(modelFit, testing2))
wd <- "C:/Users/jsardinha/Documents/GitHub/PML_JHU_PeerAssessment_01"
setwd(wd)
library(RCurl)
library(knitr)
library(caret)
library(ggplot2)
library(corrplot)
library(randomForest)
if(!file.exists("./data")){dir.create("./data")}
trainDataURL <- "https://d396quszas40orc.cloudfront.net/predmachlearn/pml-training.csv"
trainFile <- paste("./data/", basename(trainDataURL), sep = "")
download.file(trainDataURL, trainFile, method = "curl")
if(!file.exists("./data")){dir.create("./data")}
testDataURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
testFile <- paste("./data/", basename(testDataURL), sep = "")
download.file(testDataURL, testFile, method = "curl")
trainData <- read.csv(trainFile)
testData <- read.csv(testFile)
toMatch <- c("X", "user_name", "raw_timestamp_part_1", "raw_timestamp_part_2", "cvtd_timestamp", "new_window", "num_window")
removeColumns <- grep(paste(toMatch,collapse="|"), colnames(trainData))
nzv <- nearZeroVar(trainData, saveMetrics = TRUE)
removeColumns <- c(removeColumns,which(nzv$nzv == TRUE))
AggregateVals <- names(trainData[,colSums(is.na(trainData), na.rm = FALSE) > 0.95*nrow(trainData)])
NAColumns <- grep(paste(AggregateVals,collapse="|"), colnames(trainData))
removeColumns <- c(removeColumns,NAColumns)
#Removind Uniques only
removeColumns <- unique(removeColumns)
removeColumns <- sort(removeColumns)
#Preparing Tidy Data Sets
trainDataTidy <- trainData[,-removeColumns]
testDataTidy <- testData[,-removeColumns] # Try to see if this works without removing cols
write.table(testDataTidy, file ="testDataTidy.csv", sep = ",")
